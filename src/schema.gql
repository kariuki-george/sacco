# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

type Savings {
  _id: ID!
  name: String!
  type: String!
  amountSaved: Int!
  amountAimed: Int!
  frozen: Boolean!
  userId: ID!
  bankId: ID!
  amountLoanable: Float!
}

type Bank {
  _id: ID!
  default: Boolean!
  type: String!
  amount: Int!
  accountId: ID!
}

type Transaction {
  type: String!
  amount: Int!
  from: String!
  to: String!
  toId: ID!
  fromId: ID!
  status: String!
  userId: ID!
}

type Guarantor {
  amount: Int!
  token: String!
  userId: ID!
  loanId: ID!
}

type Loan {
  amount: Float!
  amountPaid: Int!
  userId: ID!
  loanTypeId: ID!
  guarantor: Boolean!
  processing: Boolean!
  _id: ID!
  canWithdraw: Boolean!
  amountRemaining: Float!
}

type LoanType {
  name: String!

  """
  This is a percentage for loans savings...eg, 90 means 90% total savings.
  """
  maxLoan: Int!

  """Interest rate in percentage."""
  interestRate: Int!

  """This is number of months required to repay the loan."""
  repayPeriod: Int!
  guarantor: Boolean!
  _id: ID!
}

type Token {
  status: String!
  token: String!
}

type CreateLoanResponse {
  loan: Loan
  token: [Token!]
  message: String!

  """Amount remaining for guarantors to guarantee"""
  amountRemaining: Float
}

type CreateGuarantorResponse {
  token: String!
}

type GetAllLoansResponse {
  loans: [Loan!]!
  guarantorLoans: [Guarantor!]!
}

type LoginResponse {
  user: User!
  accessToken: String!
}

type Query {
  getHello: String!
  getUsersTotal: Int!
  getAllUsers: [User!]!
  getAllSavings: [Savings!]!
  findOne(id: String!): Savings!
  getTotalSaving: Int!
  getSavingsByUserId(id: String!): [Savings!]!
  getEscrow(userId: String!): Bank!
  getUserTransactions(userId: String!): [Transaction!]!
  getAllLoanTypes: [LoanType!]!
  getLoanTypeId(loanTypeId: String!): LoanType!
  getAllLoansByUserId(userId: String!): GetAllLoansResponse!
  getTotalLoans: Int!
}

type Mutation {
  createUser(createUserDto: CreateUserDto!): User!
  createAdmin(createAdminDto: CreateUserDto!): User!
  saveToCustomUserAccount(depositIntoSavingAccountDto: DepositIntoSavingAccountDto!): Savings!
  saveToSaccoAccount(depositIntoSavingAccountDto: DepositIntoSavingAccountDto!): Savings!
  createSacco(id: String!): Savings!
  createNormalSavingsAccount(createNormalSaving: CreateNormalSavingDto!): Savings!
  outDeposit(outDeposit: DepositDto!): Bank!
  createGuarantor(createGurantor: CreateGuarantorDto!): CreateGuarantorResponse!
  createLoanType(createLoanType: CreateLoanTypeDto!): LoanType!

  """
  This mutation can create a guarantorless loan and also initializes guarantor loans. Use this only when validating the first guarantor. For subsequent guarantor validations, use postLoanInitialization mutation
  """
  initializeLoan(createLoan: CreateLoanDto!): CreateLoanResponse!

  """This mutation is two be used to verify the second guarantor onwards"""
  postLoanInitialization(validateGuarantor: PostLoanInitializationDto!): CreateLoanResponse!
  transferLoanToEscrow(loanId: String!): String!
  payloan(payloan: PayLoanDto!): Loan!
  login(loginDto: LoginDto!): LoginResponse!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phoneNumber: String!
}

input DepositIntoSavingAccountDto {
  userId: ID!
  amount: Int!
  savingsId: ID!
  bankId: ID
}

input CreateNormalSavingDto {
  userId: ID!
  amountAimed: Int!
  name: String!
}

input DepositDto {
  amount: Int!
  userId: ID!
  phoneNumber: Int
}

input CreateGuarantorDto {
  userId: ID!
  amount: Int!
}

input CreateLoanTypeDto {
  name: String!

  """
  This is a percentage for loans savings...eg, 90 means 90% total savings.
  """
  maxLoan: Int!

  """Interest rate in percentage."""
  interestRate: Int!

  """This is number of months required to repay the loan."""
  repayPeriod: Int!
  guarantor: Boolean!
}

input CreateLoanDto {
  amount: Int!
  userId: ID!
  loanTypeId: ID!
  token: String
}

input PostLoanInitializationDto {
  loanId: ID!
  token: String!
}

input PayLoanDto {
  loanId: ID!
  amount: Float!
}

input LoginDto {
  email: String!
  password: String!
}